import os
import json
import requests
from typing import List, Dict, Any
from langchain_openai import ChatOpenAI
from langchain.agents import Tool, initialize_agent
from langchain_core.messages import AIMessage, HumanMessage, SystemMessage


DEPENDENCY_FILES = [
    "package.json",
    "requirements.txt",
    "Pipfile",
    "pyproject.toml",
    "poetry.lock",
    "package-lock.json",
    "yarn.lock",
    "composer.json",
    "Gemfile",
    "Gemfile.lock",
    "go.mod",
    "go.sum",
    "Cargo.toml",
    "Cargo.lock"
]

openai_api_key = os.getenv("OPENAI_API_KEY")

def post_github_comment(review_text: str) -> bool:
    """Post a comment to the GitHub PR using GitHub API"""
    github_token = os.getenv("GITHUB_TOKEN")
    github_repository = os.getenv("GITHUB_REPOSITORY")
    github_event_path = os.getenv("GITHUB_EVENT_PATH")
    
    if not all([github_token, github_repository, github_event_path]):
        print("Missing GitHub environment variables. Cannot post comment.")
        return False
    
    try:
        # Read the GitHub event payload
        with open(github_event_path, 'r') as f:
            event_data = json.load(f)
        
        # Extract PR information
        pr_number = event_data.get('pull_request', {}).get('number')
        if not pr_number:
            print("No pull request number found in event data.")
            return False
        
        # Prepare the comment
        comment_body = f"""## 🤖 AI Code Review

{review_text}

---
*This review was automatically generated by AI Code Review Bot*"""
        
        # Post the comment
        url = f"https://api.github.com/repos/{github_repository}/issues/{pr_number}/comments"
        headers = {
            "Authorization": f"token {github_token}",
            "Accept": "application/vnd.github.v3+json",
            "User-Agent": "AI-Code-Review-Bot"
        }
        data = {"body": comment_body}
        
        response = requests.post(url, headers=headers, json=data)
        
        if response.status_code == 201:
            print(f"✅ Successfully posted review comment to PR #{pr_number}")
            return True
        else:
            print(f"❌ Failed to post comment. Status: {response.status_code}, Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"❌ Error posting GitHub comment: {str(e)}")
        return False

def read_changed_code_files(filenames: List[str]) -> str:
    content = ""
    for fname in filenames:
        if os.path.exists(fname):
            with open(fname, "r", encoding="utf-8") as f:
                file_content = f.read()
            content += f"### {fname}\n{file_content}\n\n"
    return content or "No code files found."

def read_dependency_files() -> str:
    content = ""
    for file in DEPENDENCY_FILES:
        if os.path.exists(file):
            with open(file, "r", encoding="utf-8") as f:
                file_content = f.read()
            content += f"### {file}\n{file_content}\n\n"
    return content or "No dependency files found."

def code_review_tool_func(code_content: str) -> str:
    llm = ChatOpenAI(model="gpt-4o-mini", temperature=0.2, openai_api_key=openai_api_key)
    messages = [
        SystemMessage(content="""You are an expert AI code reviewer. Review the following code for quality, potential issues, and improvements. 

IMPORTANT: Format your response as bullet points using markdown:
• Start each point with a bullet (•)
• Be specific and actionable
• Include line numbers when possible
• Categorize issues as: 🐛 Bug, ⚠️ Warning, 💡 Suggestion, ✅ Good Practice
• Keep each point concise but informative
• Limit to 8-10 key points maximum

Example format:
• 🐛 Line 15: Potential null pointer exception if user input is None
• ⚠️ Line 23: Function is too long (45 lines), consider breaking into smaller functions
• 💡 Line 8: Consider using f-strings instead of .format() for better readability
• ✅ Line 5: Good use of type hints for better code documentation"""),
        HumanMessage(content=code_content),
    ]
    response = llm(messages)
    return response.content

code_review_tool = Tool(
    name="Code Review",
    func=code_review_tool_func,
    description="Review code files for quality, bugs, and improvements."
)

def security_scan_deps_tool_func(deps_content: str) -> str:
    llm = ChatOpenAI(model="gpt-4o-mini", temperature=0, openai_api_key=openai_api_key)
    messages = [
        SystemMessage(content="""You are a security expert reviewing software dependencies for vulnerabilities and risks. 

IMPORTANT: Format your response as bullet points using markdown:
• Start each point with a bullet (•)
• Categorize as: 🔒 Security, ⚠️ Outdated, 💡 Recommendation
• Include specific package names and versions
• Be actionable and specific
• Limit to 5-7 key points maximum

Example format:
• 🔒 Security: package 'requests' version 2.20.0 has known CVE-2021-XXXX vulnerability
• ⚠️ Outdated: 'numpy' version 1.19.0 is 2 years old, latest is 1.24.0
• 💡 Recommendation: Consider adding 'bandit' for Python security scanning"""),
        HumanMessage(content=deps_content),
    ]
    response = llm(messages)
    return response.content

security_scan_tool = Tool(
    name="Dependency Security Scan",
    func=security_scan_deps_tool_func,
    description="Analyze dependency files for security vulnerabilities and outdated packages."
)

llm = ChatOpenAI(model="gpt-4o-mini", temperature=0, openai_api_key=openai_api_key)

agent = initialize_agent(
    tools=[code_review_tool, security_scan_tool],
    llm=llm,
    agent="zero-shot-react-description",
    verbose=False,
)

if __name__ == "__main__":
    changed_files_str = os.getenv("CHANGED_FILES", "")
    changed_files = changed_files_str.split(",") if changed_files_str else []
    
    # Filter out empty strings
    changed_files = [f.strip() for f in changed_files if f.strip()]

    if not changed_files:
        print("No relevant files changed. Skipping review.")
        exit(0)

    print(f"🔍 Reviewing {len(changed_files)} changed file(s): {', '.join(changed_files)}")

    code_content = read_changed_code_files(changed_files)
    deps_content = read_dependency_files()

    prompt = f"""You have two tasks:
    1) Code Review: Review this changed code for bugs, quality, and improvements:
    {code_content}

    2) Security Scan: Review these dependencies for vulnerabilities:
    {deps_content}

    Please use the appropriate tool and provide separate, clear feedback for each task.
    """

    try:
        result = agent.run(prompt)
        print("🤖 AI Review completed successfully!")
        print("\n" + "="*50)
        print(result)
        print("="*50 + "\n")
        
        # Try to post comment to GitHub PR if we're in a PR context
        github_event_name = os.getenv("GITHUB_EVENT_NAME", "")
        if github_event_name == "pull_request":
            print("📝 Attempting to post review comment to GitHub PR...")
            post_github_comment(result)
        else:
            print(f"ℹ️  Not in PR context (event: {github_event_name}), skipping GitHub comment.")
            
    except Exception as e:
        print(f"❌ Error during AI review: {str(e)}")
        exit(1)
